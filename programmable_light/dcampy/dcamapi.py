# dcamapi.py : 2018/05/22

"""
module for accessing DCAM via DCAM-API.
"""

import platform
from enum import IntEnum
import ctypes
from ctypes import *

# from threading import Event, Thread
# from time import sleep

# ==== load shared library ====

__dll = cdll.LoadLibrary('dcamapi')

# ==== declare constants ====


class DCERR(IntEnum):
	#/* status error */
	BUSY 						= 0x80000101#,/*		API cannot process in busy state.		*/
	NOTREADY 					= 0x80000103#,/*		API requires ready state.				*/
	NOTSTABLE 					= 0x80000104#,/*		API requires stable or unstable state.	*/
	UNSTABLE 					= 0x80000105#,/*		API does not support in unstable state.	*/
	NOTBUSY 					= 0x80000107#,/*		API requires busy state.				*/
	EXCLUDED					= 0x80000110#,/*		some resource is exclusive and already used	*/
	COOLINGTROUBLE				= 0x80000302#,/*		something happens near cooler */
	NOTRIGGER 					= 0x80000303#,/*		no trigger when necessary. Some camera supports this error. */
	TEMPERATURE_TROUBLE 		= 0x80000304#,/*		camera warns its temperature */
	TOOFREQUENTTRIGGER 			= 0x80000305#,/*		input too frequent trigger. Some camera supports this error. */
	#/* wait error */
	ABORT						= 0x80000102#,/*		abort process			*/
	TIMEOUT						= 0x80000106#,/*		timeout					*/
	LOSTFRAME					= 0x80000301#,/*		frame data is lost		*/
	MISSINGFRAME_TROUBLE		= 0x80000f06#,/*		frame is lost but reason is low lever driver's bug */
	INVALIDIMAGE				= 0x80000321#,/*		hpk format data is invalid data	*/
	#/* initialization error */
	NORESOURCE					= 0x80000201#,/*		not enough resource except memory	*/
	NOMEMORY					= 0x80000203#,/*		not enough memory		*/
	NOMODULE					= 0x80000204#,/*		no sub module			*/
	NODRIVER					= 0x80000205#,/*		no driver				*/
	NOCAMERA					= 0x80000206#,/*		no camera				*/
	NOGRABBER					= 0x80000207#,/*		no grabber				*/
	NOCOMBINATION				= 0x80000208#,/*		no combination on registry */
	FAILOPEN					= 0x80001001#,/* DEPRECATED */
	INVALIDMODULE				= 0x80000211#,/*		dcam_init() found invalid module */
	INVALIDCOMMPORT				= 0x80000212#,/*		invalid serial port		*/
	FAILOPENBUS					= 0x81001001#,/*		the bus or driver are not available	*/
	FAILOPENCAMERA				= 0x82001001#,/*		 camera report error during opening	*/
	#/* calling error */
	INVALIDCAMERA				= 0x80000806#,/*		invalid camera		 */
	INVALIDHANDLE				= 0x80000807#,/*		invalid camera handle	*/
	INVALIDPARAM				= 0x80000808#,/*		invalid parameter		*/
	INVALIDVALUE				= 0x80000821#,/*		invalid property value	*/
	OUTOFRANGE					= 0x80000822#,/*		value is out of range	*/
	NOTWRITABLE					= 0x80000823#,/*		the property is not writable	*/
	NOTREADABLE					= 0x80000824#,/*		the property is not readable	*/
	INVALIDPROPERTYID			= 0x80000825#,/*		the property id is invalid	*/
	NEWAPIREQUIRED				= 0x80000826#,/*		old API cannot present the value because only new API need to be used */
	WRONGHANDSHAKE				= 0x80000827#,/*		this error happens DCAM get error code from camera unexpectedly */
	NOPROPERTY					= 0x80000828#,/*		there is no altenative or influence id, or no more property id */
	INVALIDCHANNEL				= 0x80000829#,/*		the property id specifies channel but channel is invalid */
	INVALIDVIEW					= 0x8000082a#,/*		the property id specifies channel but channel is invalid */
	INVALIDSUBARRAY				= 0x8000082b#,/*		the combination of subarray values are invalid. e.g. SUBARRAYHPOS + SUBARRAYHSIZE is greater than the number of horizontal pixel of sensor. */
	ACCESSDENY					= 0x8000082c#,/*		the property cannot access during this DCAM STATUS */
	NOVALUETEXT					= 0x8000082d#,/*		the property does not have value text */
	WRONGPROPERTYVALUE			= 0x8000082e#,/*		at least one property value is wrong */
	DISHARMONY					= 0x80000830#,/*		the paired camera does not have same parameter */
	FRAMEBUNDLESHOULDBEOFF		= 0x80000832#,/*	framebundle mode should be OFF under current property settings */
	INVALIDFRAMEINDEX			= 0x80000833#,/*		the frame index is invalid  */
	INVALIDSESSIONINDEX			= 0x80000834#,/*		the session index is invalid */
	NOCORRECTIONDATA			= 0x80000838#,/*		not take the dark and shading correction data yet.*/
	CHANNELDEPENDENTVALUE		= 0x80000839#,/*	each channel has own property value so can't return overall property value. */
	VIEWDEPENDENTVALUE			= 0x8000083a#,/*		each view has own property value so can't return overall property value. */
	NOTSUPPORT= 0x80000f03#,/*		camera does not support the function or property with current settings */
	#/* camera or bus trouble */
	FAILREADCAMERA				= 0x83001002#,/*		failed to read data from camera	*/
	FAILWRITECAMERA				= 0x83001003#,/*		failed to write data to the camera */
	CONFLICTCOMMPORT			= 0x83001004#,/*		conflict the com port name user set	*/
	OPTICS_UNPLUGGED			= 0x83001005#,/* 	Optics part is unplugged so please check it. */
	FAILCALIBRATION				= 0x83001006#,/*		fail calibration	*/
	#/* 0x84000100 - 0x840001FF, DCAMERR_INVALIDMEMBER_x */
	INVALIDMEMBER_3				= 0x84000103#,/*		3th member variable is invalid value*/
	INVALIDMEMBER_5				= 0x84000105#,/*		5th member variable is invalid value*/
	INVALIDMEMBER_7				= 0x84000107#,/*		7th member variable is invalid value*/
	INVALIDMEMBER_8				= 0x84000108#,/*		7th member variable is invalid value*/
	INVALIDMEMBER_9				= 0x84000109#,/*		9th member variable is invalid value*/
	FAILEDOPENRECFILE			= 0x84001001#,/*		DCAMREC failed to open the file	*/
	INVALIDRECHANDLE			= 0x84001002#,/*		DCAMREC is invalid handle */
	FAILEDWRITEDATA				= 0x84001003#,/*		DCAMREC failed to write the data	*/
	FAILEDREADDATA				= 0x84001004#,/*		DCAMREC failed to read the data	*/
	NOWRECORDING				= 0x84001005#,/*		DCAMREC is recording data now	*/
	WRITEFULL					= 0x84001006#,/*		DCAMREC writes full frame of the session	*/
	ALREADYOCCUPIED				= 0x84001007#,/*		DCAMREC handle is already occupied by other HDCAM	*/
	TOOLARGEUSERDATASIZE		= 0x84001008#,/*		DCAMREC is set the large value to user data size	*/
	INVALIDWAITHANDLE			= 0x84002001#,/*		DCAMWAIT is invalid handle	*/
	NEWRUNTIMEREQUIRED			= 0x84002002#,/*		DCAM Module Version is older than the version that the camera requests	*/
	VERSIONMISMATCH				= 0x84002003#,/*		Camre returns the error on setting parameter to limit version	*/
	RUNAS_FACTORYMODE			= 0x84002004#,/*		Camera is running as a factory mode */
	IMAGE_UNKNOWNSIGNATURE		= 0x84003001#,/*	sigunature of image header is unknown or corrupted	*/
	IMAGE_NEWRUNTIMEREQUIRED	= 0x84003002#,/* version of image header is newer than version that used DCAM supports	*/
	IMAGE_ERRORSTATUSEXIST		= 0x84003003#,/*	image header stands error status	*/
	IMAGE_HEADERCORRUPTED		= 0x84004004#,/*	image header value is strange	*/
	IMAGE_BROKENCONTENT			= 0x84004005#,/*	image content is corrupted	*/
	#/* calling error for DCAM-API 2.1.3 */
	UNKNOWNMSGID				= 0x80000801#,/*		unknown message id		*/
	UNKNOWNSTRID				= 0x80000802#,/*		unknown string id		*/
	UNKNOWNPARAMID				= 0x80000803#,/*		unkown parameter id		*/
	UNKNOWNBITSTYPE				= 0x80000804#,/*		unknown bitmap bits type			*/
	UNKNOWNDATATYPE				= 0x80000805#,/*		unknown frame data type				*/
	#/* internal error */
	NONE						= 0	#,		/*		no error, nothing to have done		*/
	INSTALLATIONINPROGRESS		= 0x80000f00#,/*	installation progress				*/
	UNREACH						= 0x80000f01#,/*		internal error						*/
	UNLOADED					= 0x80000f04#,/*		calling after process terminated	*/
	THRUADAPTER					= 0x80000f05#,/*											*/
	NOCONNECTION				= 0x80000f07#,/*		HDCAM lost connection to camera		*/
	NOTIMPLEMENT				= 0x80000f02#,/*		not yet implementation				*/
	APIINIT_INITOPTIONBYTES		= 0xa4010003#,/*	"API_INIT has a invalid parameter is initoptionbytes!"	*/
	APIINIT_INITOPTION			= 0xa4010004#,/*	"API_INIT has a invalid parameter is initoption!"	*/
	INITOPTION_COLLISION_BASE	= 0xa401C000#,
	INITOPTION_COLLISION_MAX	= 0xa401FFFF#,
	#/*	Between DCAMERR_INITOPTION_COLLISION_BASE and DCAMERR_INITOPTION_COLLISION_MAX means there is collision with initoption in DCAMAPI_INIT. */
	#/*	The value "(error code) - DCAMERR_INITOPTION_COLLISION_BASE" indicates the index which second INITOPTION group happens. */
	#/* success */
	SUCCESS= 1#/*		no error, general success code, app should check the value is positive	*/    


class CAP_START(IntEnum):
	SEQUENCE				= -1
	SNAP					= 0


class WAIT_EVENT(IntEnum):
	CAP_TRANSFERRED 		= 0x0001
	CAP_FRAMEREADY 			= 0x0002
	CAP_CYCLEEND 			= 0x0004
	CAP_EXPOSUREEND 		= 0x0008
	CAP_STOPPED 			= 0x0010
	REC_STOPPED 			= 0x0100
	REC_WARNING 			= 0x0200
	REC_MISSED 				= 0x0400
	REC_DISKFULL 			= 0x1000
	REC_WRITEFAULT 			= 0x2000
	REC_SKIPPED 			= 0x4000


class DCIMG_IDPARAML(IntEnum):
	NUMBEROF_TOTALFRAME 				= 0    # number of total frame in the file
	NUMBEROF_FRAME 						= 2    # number of frame
	SIZEOF_USERDATABIN_FILE 			= 5    # byte size of file binary USER META DATA.
	SIZEOF_USERDATATEXT_FILE 			= 8    # byte size of file text USER META DATA.
	IMAGE_WIDTH 						= 9    # image width
	IMAGE_HEIGHT 						= 10    # image height
	IMAGE_ROWBYTES 						= 11    # image rowbytes
	IMAGE_PIXELTYPE 					= 12    # image pixeltype
	MAXSIZE_USERDATABIN 				= 13    # maximum byte size of binary USER META DATA
	MAXSIZE_USERDATATEXT 				= 16    # maximum byte size of text USER META DATA
	NUMBEROF_VIEW 						= 20    # number of view
	FILEFORMAT_VERSION 					= 21    # file format version
	CAPABILITY_IMAGEPROC 				= 22    # capability of image processing


class IDSTR(IntEnum):   
	BUS 						= 0x04000101
	CAMERAID 					= 0x04000102
	VENDOR 						= 0x04000103
	MODEL 						= 0x04000104
	CAMERAVERSION 				= 0x04000105
	DRIVERVERSION 				= 0x04000106
	MODULEVERSION 				= 0x04000107
	DCAMAPIVERSION 				= 0x04000108
	CAMERA_SERIESNAME 			= 0x0400012c
	OPTICALBLOCK_MODEL 			= 0x04001101
	OPTICALBLOCK_ID 			= 0x04001102
	OPTICALBLOCK_DESCRIPTION 	= 0x04001103
	OPTICALBLOCK_CHANNEL_1 		= 0x04001104
	OPTICALBLOCK_CHANNEL_2 		= 0x04001105


class PIXELTYPE(IntEnum):
	NONE 						= 0    # no pixeltype specified
	MONO8 						= 1    # B/W 8 bit
	MONO16 						= 2    # B/W 16 bit


class DCIMG_CODEPAGE(IntEnum):
	SHIFT_JIS 					= 932    # Shift JIS
	UTF16_LE 					= 1200    # UTF-16 (Little Endian)
	UTF16_BE 					= 1201    # UTF-16 (Big Endian)
	UTF7 						= 65000    # UTF-7 translation
	UTF8 						= 65001    # UTF-8 translation


class REC_STATUSFLAG(IntEnum):
	NONE 						= 0x00000000
	RECORDING					= 0x00000001  

# ================== PROP ENUMS

class DCAMPROPOPTION(IntEnum):
	PRIOR						= 0xFF000000
	NEXT		= 0x01000000
	NEAREST		= 0x80000000
	SUPPORT		= 0x00000000
	UPDATED		= 0x00000001
	VOLATILE	= 0x00000002
	ARRAYELEMENT= 0x00000004
	NONE		= 0x00000000

class DCAMPROPATTRIBUTE(IntEnum):
	ATTR_HASRANGE				= 0x80000000
	ATTR_HASSTEP				= 0x40000000
	ATTR_HASDEFAULT				= 0x20000000
	ATTR_HASVALUETEXT			= 0x10000000
	ATTR_HASCHANNEL				= 0x08000000
	ATTR_AUTOROUNDING			= 0x00800000
	ATTR_STEPPING_INCONSISTENT	= 0x00400000,
	ATTR_DATASTREAM				= 0x00200000
	ATTR_HASRATIO				= 0x00100000
	ATTR_VOLATILE				= 0x00080000
	ATTR_WRITABLE				= 0x00020000
	ATTR_READABLE				= 0x00010000
	ATTR_HASVIEW				= 0x00008000
	ATTR__SYSTEM				= 0x00004000
	ATTR_ACCESSREADY			= 0x00002000
	ATTR_ACCESSBUSY				= 0x00001000
	ATTR_ADVANCED				= 0x00000800
	ATTR_ACTION					= 0x00000400
	ATTR_EFFECTIVE				= 0x00000200

	TYPE_NONE					= 0x00000000
	TYPE_MODE					= 0x00000001
	TYPE_LONG					= 0x00000002
	TYPE_REAL					= 0x00000003
	TYPE_MASK					= 0x0000000F

class DCAMPROPATTRIBUTE2(IntEnum):
	ATTR2_ARRAYBASE				= 0x08000000
	ATTR2_ARRAYELEMENT			= 0x04000000
	ATTR2_REAL32				= 0x02000000
	ATTR2_INITIALIZEIMPROPER 	= 0x00000001
	ATTR2__FUTUREUSE			= 0x000FFFFC

class DCAMPROPUNIT(IntEnum):
	SECOND				= 1
	CELSIUS				= 2
	KELVIN				= 3
	METERPERSECOND		= 4
	PERSECOND			= 5
	MICROMETER			= 7
	NONE				= 0

class DCAMPROPMODEVALUE(IntEnum):
	# SENSORMODE */
	SENSORMODE__AREA					= 1			# "AREA"					*/
	SENSORMODE__SLIT					= 2			# "SLIT"					*/	# reserved */
	SENSORMODE__LINE					= 3			# "LINE"					*/
	SENSORMODE__TDI					= 4				# "TDI"					*/
	SENSORMODE__FRAMING				= 5				# "FRAMING"				*/	# reserved */
	SENSORMODE__PARTIALAREA			= 6				# "PARTIAL AREA"			*/	# reserved */
	SENSORMODE__SLITLINE				= 9			# "SLIT LINE"				*/	# reserved */
	SENSORMODE__TDI_EXTENDED			= 10		# "TDI EXTENDED"			*/
	SENSORMODE__PANORAMIC				= 11		# "PANORAMIC"				*/	# reserved */
	SENSORMODE__PROGRESSIVE			= 12			# "PROGRESSIVE"			*/	# reserved */
	SENSORMODE__SPLITVIEW				= 14			# "SPLIT VIEW"			*/	# reserved */
	SENSORMODE__DUALLIGHTSHEET			= 16			# "DUAL LIGHTSHEET"		*/

	# READOUTSPEED */
	READOUTSPEED__SLOWEST				= 1				# no text					*/
	READOUTSPEED__FASTEST				= 0x7FFFFFFF	# no text,w/o				*/

	# READOUT_DIRECTION */
	READOUT_DIRECTION__FORWARD			= 1			# "FORWARD"				*/
	READOUT_DIRECTION__BACKWARD		= 2			# "BACKWARD"				*/
	READOUT_DIRECTION__BYTRIGGER		= 3			# "BY TRIGGER"			*/
	READOUT_DIRECTION__DIVERGE			= 5			# "DIVERGE"				*/

	# READOUT_UNIT */
	READOUT_UNIT__LINE					= 1			# "LINE"					*/	# reserved */
	READOUT_UNIT__FRAME				= 2			# "FRAME"					*/
	READOUT_UNIT__BUNDLEDLINE			= 3			# "BUNDLED LINE"			*/
	READOUT_UNIT__BUNDLEDFRAME			= 4			# "BUNDLED FRAME"			*/

	# CCDMODE */
	CCDMODE__NORMALCCD					= 1			# "NORMAL CCD"			*/
	CCDMODE__EMCCD						= 2			# "EM CCD"				*/

	# CMOSMODE */
	CMOSMODE__NORMAL					= 1			# "NORMAL"				*/
	CMOSMODE__NONDESTRUCTIVE			= 2			# "NON DESTRUCTIVE"		*/

	# OUTPUT_INTENSITY		 */
	OUTPUT_INTENSITY__NORMAL			= 1			# "NORMAL"				*/
	OUTPUT_INTENSITY__TESTPATTERN		= 2			# "TEST PATTERN"			*/

	# OUTPUTDATA_ORIENTATION	 */													# reserved */
	OUTPUTDATA_ORIENTATION__NORMAL		= 1											# reserved */
	OUTPUTDATA_ORIENTATION__MIRROR		= 2											# reserved */
	OUTPUTDATA_ORIENTATION__FLIP		= 3											# reserved */

	# OUTPUTDATA_OPERATION		*/
	OUTPUTDATA_OPERATION__RAW			= 1
	OUTPUTDATA_OPERATION__ALIGNED		= 2

	# TESTPATTERN_KIND		 */
	TESTPATTERN_KIND__FLAT				= 2			# "FLAT"					*/
	TESTPATTERN_KIND__HORZGRADATION	= 4			# "HORZGRADATION"			*/
	TESTPATTERN_KIND__IHORZGRADATION	= 5			# "INVERT HORZGRADATION"	*/
	TESTPATTERN_KIND__VERTGRADATION	= 6			# "VERTGRADATION"			*/
	TESTPATTERN_KIND__IVERTGRADATION	= 7			# "INVERT VERTGRADATION"	*/
	TESTPATTERN_KIND__LINE				= 8			# "LINE"					*/
	TESTPATTERN_KIND__DIAGONAL			= 10			# "DIAGONAL"				*/
	TESTPATTERN_KIND__FRAMECOUNT		= 12			# "FRAMECOUNT"				*/

	# DIGITALBINNING_METHOD */
	DIGITALBINNING_METHOD__MINIMUM		= 1			# "MINIMUM"				*/
	DIGITALBINNING_METHOD__MAXIMUM		= 2			# "MAXIMUM"				*/
	DIGITALBINNING_METHOD__ODD			= 3			# "ODD"					*/
	DIGITALBINNING_METHOD__EVEN		= 4			# "EVEN"					*/
	DIGITALBINNING_METHOD__SUM			= 5			# "SUM"					*/
	DIGITALBINNING_METHOD__AVERAGE		= 6			# "AVERAGE"				*/

	# TRIGGERSOURCE */
	TRIGGERSOURCE__INTERNAL			= 1			# "INTERNAL"				*/
	TRIGGERSOURCE__EXTERNAL			= 2			# "EXTERNAL"				*/
	TRIGGERSOURCE__SOFTWARE			= 3			# "SOFTWARE"				*/
	TRIGGERSOURCE__MASTERPULSE			= 4			# "MASTER PULSE"			*/

	# TRIGGERACTIVE */
	TRIGGERACTIVE__EDGE				= 1			# "EDGE"					*/
	TRIGGERACTIVE__LEVEL				= 2			# "LEVEL"					*/
	TRIGGERACTIVE__SYNCREADOUT			= 3			# "SYNCREADOUT"			*/
	TRIGGERACTIVE__POINT				= 4			# "POINT"					*/

	# BUS_SPEED */
	BUS_SPEED__SLOWEST					= 1			# no text					*/
	BUS_SPEED__FASTEST					= 0x7FFFFFFF	#	no text,w/o				*/

	# TRIGGER_MODE */
	TRIGGER_MODE__NORMAL				= 1			# "NORMAL"				*/
	TRIGGER_MODE__PIV					= 3			# "PIV"					*/
	TRIGGER_MODE__START				= 6			# "START"					*/
	TRIGGER_MODE__MULTIGATE			= 7			# "MULTIGATE"				*/	# reserved */
	TRIGGER_MODE__MULTIFRAME			= 8			# "MULTIFRAME"			*/	# reserved */

	# TRIGGERPOLARITY */
	TRIGGERPOLARITY__NEGATIVE			= 1			# "NEGATIVE"				*/
	TRIGGERPOLARITY__POSITIVE			= 2			# "POSITIVE"				*/

	# TRIGGER_CONNECTOR */
	TRIGGER_CONNECTOR__INTERFACE		= 1			# "INTERFACE"				*/
	TRIGGER_CONNECTOR__BNC				= 2			# "BNC"					*/
	TRIGGER_CONNECTOR__MULTI			= 3			# "MULTI"					*/

	# INTERNALTRIGGER_HANDLING */
	INTERNALTRIGGER_HANDLING__SHORTEREXPOSURETIME = 1
	INTERNALTRIGGER_HANDLING__FASTERFRAMERATE	= 2
	INTERNALTRIGGER_HANDLING__ABANDONWRONGFRAME = 3
	INTERNALTRIGGER_HANDLING__BURSTMODE		= 4
	INTERNALTRIGGER_HANDLING__INDIVIDUALEXPOSURE = 7

	# SYNCREADOUT_SYSTEMBLANK */
	SYNCREADOUT_SYSTEMBLANK__STANDARD	= 1			# "STANDARD"				*/
	SYNCREADOUT_SYSTEMBLANK__MINIMUM	= 2			# "MINIMUM"				*/

	# TRIGGERENABLE_ACTIVE */
	TRIGGERENABLE_ACTIVE__DENY			= 1			# "DENY"					*/
	TRIGGERENABLE_ACTIVE__ALWAYS		= 2			# "ALWAYS"				*/
	TRIGGERENABLE_ACTIVE__LEVEL		= 3			# "LEVEL"					*/
	TRIGGERENABLE_ACTIVE__START		= 4			# "START"					*/

	# TRIGGERENABLE_POLARITY */
	TRIGGERENABLE_POLARITY__NEGATIVE	= 1			# "NEGATIVE"				*/
	TRIGGERENABLE_POLARITY__POSITIVE	= 2			# "POSITIVE"				*/
	TRIGGERENABLE_POLARITY__INTERLOCK	= 3			# "INTERLOCK"				*/

	# OUTPUTTRIGGER_CHANNELSYNC */
	OUTPUTTRIGGER_CHANNELSYNC__1CHANNEL = 1			# "1 Channel"				*/
	OUTPUTTRIGGER_CHANNELSYNC__2CHANNELS = 2			# "2 Channels"			*/
	OUTPUTTRIGGER_CHANNELSYNC__3CHANNELS = 3			# "3 Channels"			*/

	# OUTPUTTRIGGER_PROGRAMABLESTART */
	OUTPUTTRIGGER_PROGRAMABLESTART__FIRSTEXPOSURE	= 1
	OUTPUTTRIGGER_PROGRAMABLESTART__FIRSTREADOUT	= 2

	# OUTPUTTRIGGER_SOURCE */
	OUTPUTTRIGGER_SOURCE__EXPOSURE		= 1			# "EXPOSURE"				*/
	OUTPUTTRIGGER_SOURCE__READOUTEND	= 2			# "READOUT END"			*/
	OUTPUTTRIGGER_SOURCE__VSYNC		= 3			# "VSYNC"					*/
	OUTPUTTRIGGER_SOURCE__HSYNC		= 4			# "HSYNC"					*/
	OUTPUTTRIGGER_SOURCE__TRIGGER		= 6			# "TRIGGER"				*/

	# OUTPUTTRIGGER_POLARITY */
	OUTPUTTRIGGER_POLARITY__NEGATIVE	= 1			# "NEGATIVE"				*/
	OUTPUTTRIGGER_POLARITY__POSITIVE	= 2			# "POSITIVE"				*/

	# OUTPUTTRIGGER_ACTIVE */
	OUTPUTTRIGGER_ACTIVE__EDGE			= 1			# "EDGE"					*/
	OUTPUTTRIGGER_ACTIVE__LEVEL		= 2			# "LEVEL"					*/
	OUTPUTTRIGGER_ACTIVE__PULSE		= 3			# "PULSE"					*/	# reserved */

	# OUTPUTTRIGGER_KIND */
	OUTPUTTRIGGER_KIND__LOW			= 1			# "LOW"					*/
	OUTPUTTRIGGER_KIND__EXPOSURE		= 2			# "EXPOSURE"				*/
	OUTPUTTRIGGER_KIND__PROGRAMABLE	= 3			# "PROGRAMABLE"			*/
	OUTPUTTRIGGER_KIND__TRIGGERREADY	= 4			# "TRIGGER READY"			*/
	OUTPUTTRIGGER_KIND__HIGH			= 5			# "HIGH"					*/

	# OUTPUTTRIGGER_BASESENSOR */
	OUTPUTTRIGGER_BASESENSOR__VIEW1	= 1			# "VIEW 1"				*/
	OUTPUTTRIGGER_BASESENSOR__VIEW2	= 2			# "VIEW 2"				*/
	OUTPUTTRIGGER_BASESENSOR__ANYVIEW	= 15			# "ANY VIEW"				*/
	OUTPUTTRIGGER_BASESENSOR__ALLVIEWS	= 16			# "ALL VIEWS"				*/

	# EXPOSURETIME_CONTROL */
	EXPOSURETIME_CONTROL__OFF			= 1			# "OFF"					*/
	EXPOSURETIME_CONTROL__NORMAL		= 2			# "NORMAL"				*/

	# TRIGGER_FIRSTEXPOSURE */
	TRIGGER_FIRSTEXPOSURE__NEW			= 1			# "NEW"					*/
	TRIGGER_FIRSTEXPOSURE__CURRENT		= 2			# "CURRENT"				*/

	# TRIGGER_GLOBALEXPOSURE */
	TRIGGER_GLOBALEXPOSURE__NONE		= 1			# "NONE"				*/
	TRIGGER_GLOBALEXPOSURE__ALWAYS		= 2			# "ALWAYS"			*/
	TRIGGER_GLOBALEXPOSURE__DELAYED	= 3			# "DELAYED"			*/
	TRIGGER_GLOBALEXPOSURE__EMULATE	= 4			# "EMULATE"			*/
	TRIGGER_GLOBALEXPOSURE__GLOBALRESET = 5			# "GLOBAL RESET"		*/

	# FIRSTTRIGGER_BEHAVIOR */
	FIRSTTRIGGER_BEHAVIOR__STARTEXPOSURE	= 1
	FIRSTTRIGGER_BEHAVIOR__STARTREADOUT	= 2

	# MASTERPULSE_MODE */
	MASTERPULSE_MODE__CONTINUOUS		= 1			# "CONTINUOUS"		*/
	MASTERPULSE_MODE__START			= 2			# "START"				*/
	MASTERPULSE_MODE__BURST			= 3			# "BURST"				*/

	# MASTERPULSE_TRIGGERSOURCE */
	MASTERPULSE_TRIGGERSOURCE__EXTERNAL	= 1			# "EXTERNAL"		*/
	MASTERPULSE_TRIGGERSOURCE__SOFTWARE	= 2			# "SOFTWARE"		*/

	# MECHANICALSHUTTER */
	MECHANICALSHUTTER__AUTO			= 1			# "AUTO"					*/
	MECHANICALSHUTTER__CLOSE			= 2			# "CLOSE"					*/
	MECHANICALSHUTTER__OPEN			= 3			# "OPEN"					*/

	# MECHANICALSHUTTER_AUTOMODE */												# reserved */
	MECHANICALSHUTTER_AUTOMODE__OPEN_WHEN_EXPOSURE	= 1	# "OPEN WHEN EXPOSURE"	*/	# reserved */
	MECHANICALSHUTTER_AUTOMODE__CLOSE_WHEN_READOUT	= 2	# "CLOSE WHEN READOUT"	*/	# reserved */

	# LIGHTMODE */
	LIGHTMODE__LOWLIGHT				= 1			# "LOW LIGHT"				*/
	LIGHTMODE__HIGHLIGHT				= 2			# "HIGH LIGHT"			*/

	# SENSITIVITYMODE */
	SENSITIVITYMODE__OFF				= 1			# "OFF"					*/
	SENSITIVITYMODE__ON				= 2			# "ON"					*/
	SENSITIVITY2_MODE__INTERLOCK		= 3			# "INTERLOCK"				*/

	# EMGAINWARNING_STATUS */
	EMGAINWARNING_STATUS__NORMAL		= 1			# "NORMAL"				*/
	EMGAINWARNING_STATUS__WARNING		= 2			# "WARNING"				*/
	EMGAINWARNING_STATUS__PROTECTED	= 3			# "PROTECTED"				*/

	# PHOTONIMAGINGMODE */
	PHOTONIMAGINGMODE__0				= 0			# "0"						*/
	PHOTONIMAGINGMODE__1				= 1			# "1"						*/
	PHOTONIMAGINGMODE__2				= 2			# "2"						*/
	PHOTONIMAGINGMODE__3				= 3			# "2"						*/

	# SENSORCOOLER */
	SENSORCOOLER__OFF					= 1			# "OFF"					*/
	SENSORCOOLER__ON					= 2			# "ON"					*/
	SENSORCOOLER__BEST					= 3			# "BEST"					*/	# reserved */
	SENSORCOOLER__MAX					= 4			# "MAX"					*/

	# SENSORTEMPERATURE_STATUS */
	SENSORTEMPERATURE_STATUS__NORMAL		= 0
	SENSORTEMPERATURE_STATUS__WARNING		= 1
	SENSORTEMPERATURE_STATUS__PROTECTION	= 2

	# SENSORCOOLERSTATUS */
	SENSORCOOLERSTATUS__ERROR4			= -4			# "ERROR4"				*/
	SENSORCOOLERSTATUS__ERROR3			= -3			# "ERROR3"				*/
	SENSORCOOLERSTATUS__ERROR2			= -2			# "ERROR2"				*/
	SENSORCOOLERSTATUS__ERROR1			= -1			# "ERROR1"				*/
	SENSORCOOLERSTATUS__NONE			= 0			# "NONE"					*/
	SENSORCOOLERSTATUS__OFF			= 1			# "OFF"					*/
	SENSORCOOLERSTATUS__READY			= 2			# "READY"					*/
	SENSORCOOLERSTATUS__BUSY			= 3			# "BUSY"					*/
	SENSORCOOLERSTATUS__ALWAYS			= 4			# "ALWAYS"				*/

	# REALTIMEAGAINCORRECT_LEVEL */
	REALTIMEGAINCORRECT_LEVEL__1		= 1			# "1"						*/
	REALTIMEGAINCORRECT_LEVEL__2		= 2			# "2"						*/
	REALTIMEGAINCORRECT_LEVEL__3		= 3			# "3"						*/
	REALTIMEGAINCORRECT_LEVEL__4		= 4			# "4"						*/
	REALTIMEGAINCORRECT_LEVEL__5		= 5			# "5"						*/

	# WHITEBALANCEMODE */
	WHITEBALANCEMODE__FLAT				= 1			# "FLAT"					*/
	WHITEBALANCEMODE__AUTO				= 2			# "AUTO"					*/
	WHITEBALANCEMODE__TEMPERATURE		= 3			# "TEMPERATURE"			*/
	WHITEBALANCEMODE__USERPRESET		= 4			# "USER PRESET"			*/

	# DARKCALIB_TARGET */
	DARKCALIB_TARGET__ALL				= 1			# "ALL"					*/
	DARKCALIB_TARGET__ANALOG			= 2			# "ANALOG"				*/

	# SHADINGCALIB_METHOD */
	SHADINGCALIB_METHOD__AVERAGE		= 1			# "AVERAGE"				*/
	SHADINGCALIB_METHOD__MAXIMUM		= 2			# "MAXIMUM"				*/
	SHADINGCALIB_METHOD__USETARGET		= 3			# "USE TARGET"			*/

	# CAPTUREMODE */
	CAPTUREMODE__NORMAL				= 1			# "NORMAL"				*/
	CAPTUREMODE__DARKCALIB				= 2			# "DARK CALIBRATION"		*/
	CAPTUREMODE__SHADINGCALIB			= 3			# "SHADING CALIBRATION"	*/
	CAPTUREMODE__TAPGAINCALIB			= 4			# "TAP GAIN CALIBRATION"	*/
	CAPTUREMODE__BACKFOCUSCALIB		= 5			# "BACK FOCUS CALIBRATION"*/	# ORCA-D2 */

	# INTERFRAMEALU_ENABLE */
	INTERFRAMEALU_ENABLE__OFF			= 1			# "OFF"					*/
	INTERFRAMEALU_ENABLE__TRIGGERSOURCE_ALL = 2
	INTERFRAMEALU_ENABLE__TRIGGERSOURCE_INTERNAL=3

	# SUBTRACT_DATASTATUS/DCAM_IDPROP_SHADINGCALIB_DATASTATUS */
	CALIBDATASTATUS__NONE				= 1			# "NONE"					*/
	CALIBDATASTATUS__FORWARD			= 2			# "FORWARD"				*/
	CALIBDATASTATUS__BACKWARD			= 3			# "BACKWARD"				*/
	CALIBDATASTATUS__BOTH				= 4			# "BOTH"					*/

	# TAPGAINCALIB_METHOD */
	TAPGAINCALIB_METHOD__AVE			= 1			# "AVERAGE"				*/
	TAPGAINCALIB_METHOD__MAX			= 2			# "MAXIMUM"				*/
	TAPGAINCALIB_METHOD__MIN			= 3			# "MINIMUM"				*/

	# RECURSIVEFILTERFRAMES */
	RECURSIVEFILTERFRAMES__2			= 2			# "2 FRAMES"				*/
	RECURSIVEFILTERFRAMES__4			= 4			# "4 FRAMES"				*/
	RECURSIVEFILTERFRAMES__8			= 8			# "8 FRAMES"				*/
	RECURSIVEFILTERFRAMES__16			= 16			# "16 FRAMES"				*/
	RECURSIVEFILTERFRAMES__32			= 32			# "32 FRAMES"				*/
	RECURSIVEFILTERFRAMES__64			= 64			# "64 FRAMES"				*/

	# INTENSITYLUT_MODE */
	INTENSITYLUT_MODE__THROUGH			= 1			# "THROUGH"				*/
	INTENSITYLUT_MODE__PAGE			= 2			# "PAGE"					*/
	INTENSITYLUT_MODE__CLIP			= 3			# "CLIP"					*/

	# BINNING */
	BINNING__1							= 1			# "1X1"					*/
	BINNING__2							= 2			# "2X2"					*/
	BINNING__4							= 4			# "4X4"					*/
	BINNING__8							= 8			# "8X8"					*/
	BINNING__16						= 16			# "16X16"					*/

	# COLORTYPE */
	COLORTYPE__BW						= 1
	COLORTYPE__RGB						= 2
	COLORTYPE__BGR						= 3

	# BITSPERCHANNEL */
	BITSPERCHANNEL__8					= 8			# "8BIT"					*/
	BITSPERCHANNEL__10					= 10			# "10BIT"					*/
	BITSPERCHANNEL__12					= 12			# "12BIT"					*/
	BITSPERCHANNEL__14					= 14			# "14BIT"					*/
	BITSPERCHANNEL__16					= 16			# "16BIT"					*/

	# IMAGEFOOTER_FORMAT */

	# DEFECTCORRECT_MODE */
	DEFECTCORRECT_MODE__OFF			= 1			# "OFF"					*/
	DEFECTCORRECT_MODE__ON				= 2			# "ON"					*/

	# DEFECTCORRECT_METHOD */
	DEFECTCORRECT_METHOD__CEILING		= 3			# "CEILING"				*/
	DEFECTCORRECT_METHOD__PREVIOUS		= 4			# "PREVIOUS"				*/

	# HOTPIXELCORRECT_LEVEL */
	HOTPIXELCORRECT_LEVEL__STANDARD	= 1			# "STANDARD"				*/
	HOTPIXELCORRECT_LEVEL__MINIMUM		= 2			# "MINIMUM"				*/
	HOTPIXELCORRECT_LEVEL__AGGRESSIVE	= 3			# "AGGRESSIVE"			*/

	# SYSTEM_ALIVE */
	SYSTEM_ALIVE__OFFLINE				= 1			# "OFFLINE"				*/
	SYSTEM_ALIVE__ONLINE				= 2			# "ONLINE"				*/

	# TIMESTAMP_MODE */
	TIMESTAMP_MODE__NONE				= 1			# "NONE"					*/
	TIMESTAMP_MODE__LINEBEFORELEFT		= 2			# "LINE BEFORE LEFT"		*/
	TIMESTAMP_MODE__LINEOVERWRITELEFT	= 3			# "LINE OVERWRITE LEFT"	*/
	TIMESTAMP_MODE__AREABEFORELEFT		= 4			# "AREA BEFORE LEFT"		*/
	TIMESTAMP_MODE__AREAOVERWRITELEFT	= 5			# "AREA OVERWRITE LEFT"	*/

	# PACECONTROL_MODE */
	PACECONTROL_MODE__OFF				= 1,			# "OFF"					*/
	PACECONTROL_MODE__INTERVAL			= 2,			# "INTERVAL"				*/
	PACECONTROL_MODE__THINNING			= 3,			# "THINNING"				*/

	# TIMING_EXPOSURE */
	TIMING_EXPOSURE__AFTERREADOUT		= 1			# "AFTER READOUT"			*/
	TIMING_EXPOSURE__OVERLAPREADOUT	= 2			# "OVERLAP READOUT"		*/
	TIMING_EXPOSURE__ROLLING			= 3			# "ROLLING"				*/
	TIMING_EXPOSURE__ALWAYS			= 4			# "ALWAYS"				*/
	TIMING_EXPOSURE__TDI				= 5			# "TDI"					*/

	# TIMESTAMP_PRODUCER */
	TIMESTAMP_PRODUCER__NONE				= 1,		# "NONE"					*/
	TIMESTAMP_PRODUCER__DCAMMODULE			= 2,		# "DCAM MODULE"			*/
	TIMESTAMP_PRODUCER__KERNELDRIVER		= 3,		# "KERNEL DRIVER"			*/
	TIMESTAMP_PRODUCER__CAPTUREDEVICE		= 4,		# "CAPTURE DEVICE"			*/
	TIMESTAMP_PRODUCER__IMAGINGDEVICE		= 5,		# "IMAGING DEVICE"			*/

	# FRAMESTAMP_PRODUCER */
	FRAMESTAMP_PRODUCER__NONE				= 1,		# "NONE"					*/
	FRAMESTAMP_PRODUCER__DCAMMODULE		= 2,		# "DCAM MODULE"			*/
	FRAMESTAMP_PRODUCER__KERNELDRIVER		= 3,		# "KERNEL DRIVER"			*/
	FRAMESTAMP_PRODUCER__CAPTUREDEVICE		= 4,		# "CAPTURE DEVICE"			*/
	FRAMESTAMP_PRODUCER__IMAGINGDEVICE		= 5,		# "IMAGING DEVICE"			*/

	# CAMERASTATUS_INTENSITY */
	CAMERASTATUS_INTENSITY__GOOD				= 1,	# "GOOD"					*/
	CAMERASTATUS_INTENSITY__TOODARK			= 2,	# "TOO DRAK"				*/
	CAMERASTATUS_INTENSITY__TOOBRIGHT			= 3,	# "TOO BRIGHT"				*/
	CAMERASTATUS_INTENSITY__UNCARE				= 4,	# "UNCARE"					*/
	CAMERASTATUS_INTENSITY__EMGAIN_PROTECTION	= 5,	# "EMGAIN PROTECTION"		*/
	CAMERASTATUS_INTENSITY__INCONSISTENT_OPTICS= 6,	# "INCONSISTENT OPTICS"	*/
	CAMERASTATUS_INTENSITY__NODATA				= 7,	# "NO DATA"				*/

	# CAMERASTATUS_INPUTTRIGGER */
	CAMERASTATUS_INPUTTRIGGER__GOOD			= 1,	# "GOOD"					*/
	CAMERASTATUS_INPUTTRIGGER__NONE			= 2,	# "NONE"					*/
	CAMERASTATUS_INPUTTRIGGER__TOOFREQUENT		= 3,	# "TOO FREQUENT"			*/

	# CAMERASTATUS_CALIBRATION */
	CAMERASTATUS_CALIBRATION__DONE					= 1
	CAMERASTATUS_CALIBRATION__NOTYET				= 2
	CAMERASTATUS_CALIBRATION__NOTRIGGER			= 3
	CAMERASTATUS_CALIBRATION__TOOFREQUENTTRIGGER	= 4
	CAMERASTATUS_CALIBRATION__OUTOFADJUSTABLERANGE	= 5
	CAMERASTATUS_CALIBRATION__UNSUITABLETABLE		= 6
	CAMERASTATUS_CALIBRATION__TOODARK				= 7
	CAMERASTATUS_CALIBRATION__TOOBRIGHT			= 8
	CAMERASTATUS_CALIBRATION__NOTDETECTOBJECT		= 9

	MODE__OFF							= 1			# "OFF"					*/
	MODE__ON							= 2			# "ON"					*/



class DCAMIDPROP(IntEnum):
	# Group: TIMING */
	TRIGGERSOURCE					= 0x00100110	# R/W, mode,	"TRIGGER SOURCE"		*/
	TRIGGERACTIVE					= 0x00100120	# R/W, mode,	"TRIGGER ACTIVE"		*/
	TRIGGER_MODE					= 0x00100210	# R/W, mode,	"TRIGGER MODE"			*/
	TRIGGERPOLARITY					= 0x00100220	# R/W, mode,	"TRIGGER POLARITY"		*/
	TRIGGER_CONNECTOR				= 0x00100230	# R/W, mode,	"TRIGGER CONNECTOR"		*/
	TRIGGERTIMES					= 0x00100240	# R/W, long,	"TRIGGER TIMES"			*/
	TRIGGERDELAY					= 0x00100260	# R/W, sec,	"TRIGGER DELAY"			*/
	INTERNALTRIGGER_HANDLING		= 0x00100270	# R/W, mode,	"INTERNAL TRIGGER HANDLING"*/
	TRIGGERMULTIFRAME_COUNT			= 0x00100280	# R/W, long,	"TRIGGER MULTI FRAME COUNT"*/
	SYNCREADOUT_SYSTEMBLANK			= 0x00100290	# R/W, mode,	"SYNC READOUT SYSTEM BLANK" */
	TRIGGERENABLE_ACTIVE			= 0x00100410	# R/W, mode,	"TRIGGER ENABLE ACTIVE"	*/
	TRIGGERENABLE_POLARITY			= 0x00100420	# R/W, mode,	"TRIGGER ENABLE POLARITY"*/
	TRIGGERNUMBER_FORFIRSTIMAGE		= 0x00100810	# R/O, long,	"TRIGGER NUMBER FOR FIRST IMAGE" */
	TRIGGERNUMBER_FORNEXTIMAGE		= 0x00100820	# R/O, long,	"TRIGGER NUMBER FOR NEXT IMAGE" */
	BUS_SPEED						= 0x00180110	# R/W, long,	"BUS SPEED"				*/
	NUMBEROF_OUTPUTTRIGGERCONNECTOR	= 0x001C0010	# R/O, long,	"NUMBER OF OUTPUT TRIGGER CONNECTOR"*/
	OUTPUTTRIGGER_CHANNELSYNC		= 0x001C0030	# R/W, mode,	"OUTPUT TRIGGER CHANNEL SYNC"	*/
	OUTPUTTRIGGER_PROGRAMABLESTART	= 0x001C0050	# R/W, mode,	"OUTPUT TRIGGER PROGRAMABLE START"	*/
	OUTPUTTRIGGER_SOURCE			= 0x001C0110	# R/W, mode,	"OUTPUT TRIGGER SOURCE"		*/
	OUTPUTTRIGGER_POLARITY			= 0x001C0120	# R/W, mode,	"OUTPUT TRIGGER POLARITY"	*/
	OUTPUTTRIGGER_ACTIVE			= 0x001C0130	# R/W, mode,	"OUTPUT TRIGGER ACTIVE"		*/
	OUTPUTTRIGGER_DELAY				= 0x001C0140	# R/W, sec,	"OUTPUT TRIGGER DELAY"		*/
	OUTPUTTRIGGER_PERIOD			= 0x001C0150	# R/W, sec,	"OUTPUT TRIGGER PERIOD"		*/
	OUTPUTTRIGGER_KIND				= 0x001C0160	# R/W, mode,	"OUTPUT TRIGGER KIND"		*/
	OUTPUTTRIGGER_BASESENSOR		= 0x001C0170	# R/W, mode,	"OUTPUT TRIGGER BASE SENSOR" */
	OUTPUTTRIGGER_PREHSYNCCOUNT		= 0x001C0190	# R/W, mode,	"OUTPUT TRIGGER PRE HSYNC COUNT" */
	_OUTPUTTRIGGER					= 0x00000100	# the offset of ID for Nth OUTPUT TRIGGER parameter */

	MASTERPULSE_MODE				= 0x001E0020	# R/W, mode,	"MASTER PULSE MODE"			*/
	MASTERPULSE_TRIGGERSOURCE		= 0x001E0030	# R/W, mode,	"MASTER PULSE TRIGGER SOURCE"	*/
	MASTERPULSE_INTERVAL			= 0x001E0040	# R/W, sec,	"MASTER PULSE INTERVAL"		*/
	MASTERPULSE_BURSTTIMES			= 0x001E0050	# R/W, long,	"MASTER PULSE BURST TIMES"	*/

	# Group: FEATURE */
	# exposure period */
	EXPOSURETIME					= 0x001F0110	# R/W, sec,	"EXPOSURE TIME"			*/
	SYNC_MULTIVIEWEXPOSURE			= 0x001F0120	# R/W, mode,	"SYNCHRONOUS MULTI VIEW EXPOSURE"	*/
	EXPOSURETIME_CONTROL			= 0x001F0130	# R/W, mode,	"EXPOSURE TIME CONTROL"	*/
	TRIGGER_FIRSTEXPOSURE			= 0x001F0200	# R/W, mode,	"TRIGGER FIRST EXPOSURE"	*/
	TRIGGER_GLOBALEXPOSURE			= 0x001F0300	# R/W, mode,	"TRIGGER GLOBAL EXPOSURE"	*/
	FIRSTTRIGGER_BEHAVIOR			= 0x001F0310	# R/W, mode,	"FIRST TRIGGER BEHAVIOR"	*/
	MULTIFRAME_EXPOSURE				= 0x001F1000	# R/W, sec,	"MULTI FRAME EXPOSURE TIME"	*/
	_MULTIFRAME						= 0x00000010	# the offset of ID for Nth MULTIFRAME */

	LIGHTMODE						= 0x00200110	# R/W, mode,	"LIGHT MODE"			*/

	# sensitivity */
	SENSITIVITYMODE					= 0x00200210	# R/W, mode,	"SENSITIVITY MODE"		*/
	SENSITIVITY						= 0x00200220	# R/W, long,	"SENSITIVITY"			*/
	SENSITIVITY2_MODE				= 0x00200230	# R/W, mode,	"SENSITIVITY2 MODE"		*/	# reserved */
	SENSITIVITY2					= 0x00200240	# R/W, long,	"SENSITIVITY2"			*/

	DIRECTEMGAIN_MODE				= 0x00200250	# R/W, mode,	"DIRECT EM GAIN MODE"	*/
	EMGAINWARNING_STATUS			= 0x00200260	# R/O, mode,	"EM GAIN WARNING STATUS"*/
	EMGAINWARNING_LEVEL				= 0x00200270	# R/W, long,	"EM GAIN WARNING LEVEL"	*/
	EMGAINWARNING_ALARM				= 0x00200280	# R/W, mode,	"EM GAIN WARNING ALARM"	*/
	EMGAINPROTECT_MODE				= 0x00200290	# R/W, mode,	"EM GAIN PROTECT MODE"	*/
	EMGAINPROTECT_AFTERFRAMES		= 0x002002A0	# R/W, long,	"EM GAIN PROTECT AFTER FRAMES"	*/

	MEASURED_SENSITIVITY			= 0x002002B0	# R/O, real,	"MEASURED SENSITIVITY"	*/

	PHOTONIMAGINGMODE				= 0x002002F0	# R/W, mode,	"PHOTON IMAGING MODE"	*/

	# sensor cooler */
	SENSORTEMPERATURE				= 0x00200310	# R/O, celsius,"SENSOR TEMPERATURE"	*/
	SENSORCOOLER					= 0x00200320	# R/W, mode,	"SENSOR COOLER"			*/
	SENSORTEMPERATURETARGET			= 0x00200330	# R/W, celsius,"SENSOR TEMPERATURE TARGET"	*/
	SENSORCOOLERSTATUS				= 0x00200340	# R/O, mode,	"SENSOR COOLER STATUS"	*/
	SENSORCOOLERFAN					= 0x00200350	# R/W, mode,	"SENSOR COOLER FAN"		*/
	SENSORTEMPERATURE_AVE			= 0x00200360	# R/O, celsius,"SENSOR TEMPERATURE AVE"	*/
	SENSORTEMPERATURE_MIN			= 0x00200370	# R/O, celsius,"SENSOR TEMPERATURE MIN"	*/
	SENSORTEMPERATURE_MAX			= 0x00200380	# R/O, celsius,"SENSOR TEMPERATURE MAX"	*/
	SENSORTEMPERATURE_STATUS		= 0x00200390	# R/O, mode,	"SENSOR TEMPERATURE STATUS"	*/
	SENSORTEMPERATURE_PROTECT		= 0x00200400	# R/W, mode,	"SENSOR TEMPERATURE MODE"	*/

	# mechanical shutter */
	MECHANICALSHUTTER				= 0x00200410	# R/W, mode,	"MECHANICAL SHUTTER"	*/
	MECHANICALSHUTTER_AUTOMODE		= 0x00200420	# R/W, mode,	"MECHANICAL SHUTTER AUTOMODE"	*/	# reserved */

	# contrast enhance */
	CONTRAST_CONTROL				= 0x00300110	# R/W, mode,	"CONTRAST CONTROL"		*/	# reserved */
	CONTRASTGAIN					= 0x00300120	# R/W, long,	"CONTRAST GAIN"			*/
	CONTRASTOFFSET					= 0x00300130	# R/W, long,	"CONTRAST OFFSET"		*/
	HIGHDYNAMICRANGE_MODE			= 0x00300150	# R/W, mode,	"HIGH DYNAMIC RANGE MODE"	*/
	DIRECTGAIN_MODE					= 0x00300160	# R/W, mode,	"DIRECT GAIN MODE"		*/

	REALTIMEGAINCORRECT_MODE		= 0x00300170	# R/W,	mode,	"REALTIME GAIN CORRECT MODE"	*/
	REALTIMEGAINCORRECT_LEVEL		= 0x00300180	# R/W,	mode,	"REALTIME GAIN CORRECT LEVEL"		*/
	REALTIMEGAINCORRECT_INTERVAL	= 0x00300190	# R/W,	mode,	"REALTIME GAIN CORRECT INTERVAL"	*/

	# color features */
	VIVIDCOLOR						= 0x00300200	# R/W, mode,	"VIVID COLOR"			*/	# comment */
	WHITEBALANCEMODE				= 0x00300210	# R/W, mode,	"WHITEBALANCE MODE"		*/
	WHITEBALANCETEMPERATURE			= 0x00300220	# R/W, color-temp., "WHITEBALANCE TEMPERATURE"	*/
	WHITEBALANCEUSERPRESET			= 0x00300230	# R/W, long,	"WHITEBALANCE USER PRESET"		*/

	# Group: ALU */
	# ALU */
	INTERFRAMEALU_ENABLE			= 0x00380010	# R/W, mode,	"INTERFRAME ALU ENABLE"	*/
	RECURSIVEFILTER					= 0x00380110	# R/W, mode,	"RECURSIVE FILTER"		*/
	RECURSIVEFILTERFRAMES			= 0x00380120	# R/W, long,	"RECURSIVE FILTER FRAMES"*/
	SPOTNOISEREDUCER				= 0x00380130	# R/W, mode,	"SPOT NOISE REDUCER"	*/
	SUBTRACT						= 0x00380210	# R/W, mode,	"SUBTRACT"				*/
	SUBTRACTIMAGEMEMORY				= 0x00380220	# R/W, mode,	"SUBTRACT IMAGE MEMORY"	*/
	STORESUBTRACTIMAGETOMEMORY		= 0x00380230	# W/O, mode,	"STORE SUBTRACT IMAGE TO MEMORY"	*/
	SUBTRACTOFFSET					= 0x00380240	# R/W, long	"SUBTRACT OFFSET"		*/
	DARKCALIB_STABLEMAXINTENSITY	= 0x00380250	# R/W, long,	"DARKCALIB STABLE MAX INTENSITY"	*/
	SUBTRACT_DATASTATUS				= 0x003802F0	# R/W	mode,	"SUBTRACT DATA STATUS"	*/
	SHADINGCALIB_DATASTATUS			= 0x00380300	# R/W	mode,	"SHADING CALIB DATA STATUS"	*/
	SHADINGCORRECTION				= 0x00380310	# R/W, mode,	"SHADING CORRECTION"	*/
	SHADINGCALIBDATAMEMORY			= 0x00380320	# R/W, mode,	"SHADING CALIB DATA MEMORY"		*/
	STORESHADINGCALIBDATATOMEMORY	= 0x00380330	# W/O, mode,	"STORE SHADING DATA TO MEMORY"	*/
	SHADINGCALIB_METHOD				= 0x00380340	# R/W, mode,	"SHADING CALIB METHOD"	*/
	SHADINGCALIB_TARGET				= 0x00380350	# R/W, long,	"SHADING CALIB TARGET"	*/
	SHADINGCALIB_STABLEMININTENSITY	= 0x00380360	# R/W, long,	"SHADING CALIB STABLE MIN INTENSITY"	*/
	SHADINGCALIB_SAMPLES			= 0x00380370	# R/W, long,	"SHADING CALIB SAMPLES"	*/
	SHADINGCALIB_STABLESAMPLES		= 0x00380380	# R/W, long,	"SHADING CALIB STABLE SAMPLES"	*/
	SHADINGCALIB_STABLEMAXERRORPERCENT=0x00380390	# R/W, long,	"SHADING CALIB STABLE MAX ERROR PERCENT" */
	FRAMEAVERAGINGMODE				= 0x003803A0	# R/W, mode,	"FRAME AVERAGING MODE"		*/
	FRAMEAVERAGINGFRAMES			= 0x003803B0	# R/W, long,	"FRAME AVERAGING FRAMES"*/
	DARKCALIB_STABLESAMPLES			= 0x003803C0	# R/W, long,	"DARKCALIB STABLE SAMPLES"	*/
	DARKCALIB_SAMPLES				= 0x003803D0	# R/W, long,	"DARKCALIB SAMPLES"	*/
	DARKCALIB_TARGET				= 0x003803E0	# R/W, long,	"DARKCALIB TARGET" */
	CAPTUREMODE						= 0x00380410	# R/W, mode,	"CAPTURE MODE"			*/
	INTENSITYLUT_MODE				= 0x00380510	# R/W, mode,	"INTENSITY LUT MODE"	*/
	INTENSITYLUT_PAGE				= 0x00380520	# R/W, long,	"INTENSITY LUT PAGE"	*/
	INTENSITYLUT_WHITECLIP			= 0x00380530	# R/W, long,	"INTENSITY LUT WHITE CLIP"	*/
	INTENSITYLUT_BLACKCLIP			= 0x00380540	# R/W, long,	"INTENSITY LUT BLACK CLIP"	*/
	SENSORGAPCORRECT_MODE			= 0x00380620	# R/W,	long,	"SENSOR GAP CORRECT MODE"	*/

	# TAP CALIBRATION */
	TAPGAINCALIB_METHOD				= 0x00380F10	# R/W, mode,	"TAP GAIN CALIB METHOD"	*/
	TAPCALIB_BASEDATAMEMORY			= 0x00380F20	# R/W, mode,	"TAP CALIB BASE DATA MEMORY"*/
	STORETAPCALIBDATATOMEMORY		= 0x00380F30	# W/O, mode,	"STORE TAP CALIB DATA TO MEMORY"*/
	TAPCALIBDATAMEMORY				= 0x00380F40	# W/O, mode,	"TAP CALIB DATA MEMORY"	*/
	NUMBEROF_TAPCALIB				= 0x00380FF0	# R/W, long,	"NUMBER OF TAP CALIB"	*/
	TAPCALIB_GAIN					= 0x00381000	# R/W, mode,	"TAP CALIB GAIN"		*/
	_TAPCALIB						= 0x00000010	# the offset of ID for Nth TAPCALIB	*/

	# Group: READOUT */
	# readout speed */
	READOUTSPEED					= 0x00400110	# R/W, long,	"READOUT SPEED" 		*/
	READOUT_DIRECTION				= 0x00400130	# R/W, mode,	"READOUT DIRECTION"		*/
	READOUT_UNIT					= 0x00400140	# R/O, mode,	"READOUT UNIT"			*/

	# sensor mode */
	SENSORMODE						= 0x00400210	# R/W, mode,	"SENSOR MODE"			*/
	SENSORMODE_SLITHEIGHT			= 0x00400220	# R/W, long,	"SENSOR MODE SLIT HEIGHT"		*/	# reserved */
	SENSORMODE_LINEBUNDLEHEIGHT		= 0x00400250	# R/W, long,	"SENSOR MODE LINE BUNDLEHEIGHT"	*/
	SENSORMODE_FRAMINGHEIGHT		= 0x00400260	# R/W, long,	"SENSOR MODE FRAMING HEIGHT"	*/	# reserved */
	SENSORMODE_PANORAMICSTARTV		= 0x00400280	# R/W, long,	"SENSOR MODE PANORAMIC START V"	*/

	# other readout mode */
	CCDMODE							= 0x00400310	# R/W, mode,	"CCD MODE"				*/
	EMCCD_CALIBRATIONMODE			= 0x00400320	# R/W, mode,	"EM CCD CALIBRATION MODE"	*/
	CMOSMODE						= 0x00400350	# R/W, mode,	"CMOS MODE"				*/

	# output mode */
	OUTPUT_INTENSITY				= 0x00400410	# R/W, mode,	"OUTPUT INTENSITY"		*/
	OUTPUTDATA_ORIENTATION			= 0x00400420	# R/W, mode,	"OUTPUT DATA ORIENTATION"	*/	# reserved */
	OUTPUTDATA_ROTATION				= 0x00400430	# R/W, degree,	"OUTPUT DATA ROTATION"		*/	# reserved */
	OUTPUTDATA_OPERATION			= 0x00400440	# R/W, mode,	"OUTPUT DATA OPERATION"	*/

	TESTPATTERN_KIND				= 0x00400510	# R/W, mode,	"TEST PATTERN KIND"		*/
	TESTPATTERN_OPTION				= 0x00400520	# R/W, long,	"TEST PATTERN OPTION"	*/

	EXTRACTION_MODE					= 0x00400620	# R/W	mode,	"EXTRACTION MODE	"*/

	# Group: ROI */
	# binning and subarray */
	BINNING							= 0x00401110	# R/W, mode,	"BINNING"				*/
	BINNING_INDEPENDENT				= 0x00401120	# R/W, mode,	"BINNING INDEPENDENT"	*/
	BINNING_HORZ					= 0x00401130	# R/W, long,	"BINNING HORZ"			*/
	BINNING_VERT					= 0x00401140	# R/W, long,	"BINNING VERT"			*/
	SUBARRAYHPOS					= 0x00402110	# R/W, long,	"SUBARRAY HPOS"			*/
	SUBARRAYHSIZE					= 0x00402120	# R/W, long,	"SUBARRAY HSIZE"		*/
	SUBARRAYVPOS					= 0x00402130	# R/W, long,	"SUBARRAY VPOS"			*/
	SUBARRAYVSIZE					= 0x00402140	# R/W, long,	"SUBARRAY VSIZE"		*/
	SUBARRAYMODE					= 0x00402150	# R/W, mode,	"SUBARRAY MODE"			*/
	DIGITALBINNING_METHOD			= 0x00402160	# R/W, mode,	"DIGITALBINNING METHOD"	*/
	DIGITALBINNING_HORZ				= 0x00402170	# R/W, long,	"DIGITALBINNING HORZ"	*/
	DIGITALBINNING_VERT				= 0x00402180	# R/W, long,	"DIGITALBINNING VERT"	*/

	# Group: TIMING */
	# synchronous timing */
	TIMING_READOUTTIME				= 0x00403010	# R/O, sec,	"TIMING READOUT TIME"			*/
	TIMING_CYCLICTRIGGERPERIOD		= 0x00403020	# R/O, sec,	"TIMING CYCLIC TRIGGER PERIOD"	*/
	TIMING_MINTRIGGERBLANKING		= 0x00403030	# R/O, sec,	"TIMING MINIMUM TRIGGER BLANKING"	*/
	TIMING_MINTRIGGERINTERVAL		= 0x00403050	# R/O, sec,	"TIMING MINIMUM TRIGGER INTERVAL"	*/
	TIMING_EXPOSURE					= 0x00403060	# R/O, mode,	"TIMING EXPOSURE"			*/
	TIMING_INVALIDEXPOSUREPERIOD	= 0x00403070	# R/O, sec,	"INVALID EXPOSURE PERIOD"	*/
	TIMING_FRAMESKIPNUMBER			= 0x00403080	# R/W, long,	"TIMING FRAME SKIP NUMBER"	*/
	TIMING_GLOBALEXPOSUREDELAY		= 0x00403090	# R/O, sec,	"TIMING GLOBAL EXPOSURE DELAY"	*/

	INTERNALFRAMERATE				= 0x00403810	# R/W, 1/sec,	"INTERNAL FRAME RATE"		*/
	INTERNAL_FRAMEINTERVAL			= 0x00403820	# R/W, sec,	"INTERNAL FRAME INTERVAL"	*/
	INTERNALLINERATE				= 0x00403830	# R/W, 1/sec,	"INTERNAL LINE RATE"		*/
	INTERNALLINESPEED				= 0x00403840	# R/W, m/sec,	"INTERNAL LINE SPEEED"		*/
	INTERNAL_LINEINTERVAL			= 0x00403850	# R/W, sec,	"INTERNAL LINE INTERVAL"	*/

	# system information */

	TIMESTAMP_PRODUCER				= 0x00410A10	# R/O, mode,	"TIME STAMP PRODUCER"	*/
	FRAMESTAMP_PRODUCER				= 0x00410A20	# R/O, mode,	"FRAME STAMP PRODUCER"	*/

	# Group: READOUT */

	# image information */
	COLORTYPE						= 0x00420120	# R/W, mode,	"COLORTYPE"				*/
	BITSPERCHANNEL					= 0x00420130	# R/W, long,	"BIT PER CHANNEL"		*/

	NUMBEROF_CHANNEL				= 0x00420180	# R/O, long,	"NUMBER OF CHANNEL"		*/
	ACTIVE_CHANNELINDEX				= 0x00420190	# R/W, mode,	"ACTIVE CHANNEL INDEX"	*/
	NUMBEROF_VIEW					= 0x004201C0	# R/O, long,	"NUMBER OF VIEW"		*/
	ACTIVE_VIEWINDEX				= 0x004201D0	# R/W, mode,	"ACTIVE VIEW INDEX"		*/

	IMAGE_WIDTH						= 0x00420210	# R/O, long,	"IMAGE WIDTH"			*/
	IMAGE_HEIGHT					= 0x00420220	# R/O, long,	"IMAGE HEIGHT"			*/
	IMAGE_ROWBYTES					= 0x00420230	# R/O, long,	"IMAGE ROWBYTES"		*/
	IMAGE_FRAMEBYTES				= 0x00420240	# R/O, long,	"IMAGE FRAMEBYTES"		*/
	IMAGE_TOPOFFSETBYTES			= 0x00420250	# R/O, long,	"IMAGE TOP OFFSET BYTES"*/		# reserved */
	IMAGE_PIXELTYPE					= 0x00420270	# R/W, DCAM_PIXELTYPE,	"IMAGE PIXEL TYPE"	*/
	IMAGE_CAMERASTAMP				= 0x00420300	# R/W, long,	"IMAGE CAMERA STAMP"	*/

	BUFFER_ROWBYTES					= 0x00420330	# R/O, long,	"BUFFER ROWBYTES"		*/
	BUFFER_FRAMEBYTES				= 0x00420340	# R/O, long,	"BUFFER FRAME BYTES"		*/
	BUFFER_TOPOFFSETBYTES			= 0x00420350	# R/O, long,	"BUFFER TOP OFFSET BYTES"	*/
	BUFFER_PIXELTYPE				= 0x00420360	# R/O, DCAM_PIXELTYPE,	"BUFFER PIXEL TYPE"	*/

	RECORDFIXEDBYTES_PERFILE		= 0x00420410	# R/O,	long	"RECORD FIXED BYTES PER FILE"	*/
	RECORDFIXEDBYTES_PERSESSION		= 0x00420420	# R/O,	long	"RECORD FIXED BYTES PER SESSION"*/
	RECORDFIXEDBYTES_PERFRAME		= 0x00420430	# R/O,	long	"RECORD FIXED BYTES PER FRAME"	*/

	IMAGEDETECTOR_PIXELWIDTH		= 0x00420810	# R/O, micro-meter, "IMAGE DETECTOR PIXEL WIDTH"	*/	# reserved */
	IMAGEDETECTOR_PIXELHEIGHT		= 0x00420820	# R/O, micro-meter, "IMAGE DETECTOR PIXEL HEIGHT"	*/	# reserved */

	# frame bundle */
	FRAMEBUNDLE_MODE				= 0x00421010	# R/W, mode,	"FRAMEBUNDLE MODE"		*/
	FRAMEBUNDLE_NUMBER				= 0x00421020	# R/W, long,	"FRAMEBUNDLE NUMBER"	*/
	FRAMEBUNDLE_ROWBYTES			= 0x00421030	# R/O,	long,	"FRAMEBUNDLE ROWBYTES"	*/
	FRAMEBUNDLE_FRAMESTEPBYTES		= 0x00421040	# R/O, long,	"FRAMEBUNDLE FRAME STEP BYTES"	*/

	# partial area */
	NUMBEROF_PARTIALAREA			= 0x00430010	# R/W, long,	"NUMBER OF PARTIAL AREA"*/
	PARTIALAREA_HPOS				= 0x00431000	# R/W, long,	"PARTIAL AREA HPOS"		*/
	PARTIALAREA_HSIZE				= 0x00432000	# R/W, long,	"PARTIAL AREA HSIZE"	*/
	PARTIALAREA_VPOS				= 0x00433000	# R/W, long,	"PARTIAL AREA VPOS"		*/
	PARTIALAREA_VSIZE				= 0x00434000	# R/W, long,	"PARTIAL AREA VSIZE"	*/
	_PARTIALAREA					= 0x00000010	# the offset of ID for Nth PARTIAL AREA */

	# multi line */
	NUMBEROF_MULTILINE				= 0x0044F010	# R/W, long,	"NUMBER OF MULTI LINE"	*/
	MULTILINE_VPOS					= 0x00450000	# R/W, long,	"MULTI LINE VPOS"		*/
	MULTILINE_VSIZE					= 0x00460000	# R/W, long,	"MULTI LINE VSIZE"		*/
	_MULTILINE						= 0x00000010	# the offset of ID for Nth MULTI LINE */

	# defect */
	DEFECTCORRECT_MODE				= 0x00470010	# R/W, mode,	"DEFECT CORRECT MODE"	*/
	NUMBEROF_DEFECTCORRECT			= 0x00470020	# R/W, long,	"NUMBER OF DEFECT CORRECT"	*/
	HOTPIXELCORRECT_LEVEL			= 0x00470030	# R/W, mode,	"HOT PIXEL CORRECT LEVEL"	*/
	DEFECTCORRECT_HPOS				= 0x00471000	# R/W, long,	"DEFECT CORRECT HPOS"		*/
	DEFECTCORRECT_METHOD			= 0x00473000	# R/W, mode,	"DEFECT CORRECT METHOD"		*/
	_DEFECTCORRECT					= 0x00000010	# the offset of ID for Nth DEFECT */

	# Group: PACE CONTROL */
	PACECONTROL_MODE				= 0x004A0110	# R/W, mode,	"PACE CONTROL MODE"		*/
	NUMBEROF_PACECONTROL			= 0x004A0120	# R/W, long,	"NUMBER OF PACE CONTROL"*/
	PACECONTROL_COUNT				= 0x004A1000	# R/W, long,	"PACE CONTROL COUNT"	*/
	PACECONTROL_INTERVAL			= 0x004A2000	# R/W, real,	"PACE CONTROL INTERVAL"	*/
	_PACECONTROL					= 0x00000010	# the offset of ID for Nth PACECONTROL	*/

	# Group: CALIBREGION */
	CALIBREGION_MODE				= 0x00402410	# R/W, mode,	"CALIBRATE REGION MODE"		*/
	NUMBEROF_CALIBREGION			= 0x00402420	# R/W, long,	"NUMBER OF CALIBRATE REGION"*/
	CALIBREGION_HPOS				= 0x004B0000	# R/W, long,	"CALIBRATE REGION HPOS"		*/
	CALIBREGION_HSIZE				= 0x004B1000	# R/W, long,	"CALIBRATE REGION HSIZE"	*/
	_CALIBREGION					= 0x00000010	# the offset of ID for Nth REGION		*/

	# Group: MASKREGION */
	MASKREGION_MODE					= 0x00402510	# R/W, mode,	"MASK REGION MODE"		*/
	NUMBEROF_MASKREGION				= 0x00402520	# R/W, long,	"NUMBER OF MASK REGION"	*/
	MASKREGION_HPOS					= 0x004C0000	# R/W, long,	"MASK REGION HPOS"		*/
	MASKREGION_HSIZE				= 0x004C1000	# R/W, long,	"MASK REGION HSIZE"		*/
	_MASKREGION						= 0x00000010	# the offset of ID for Nth REGION		*/

	# Group: Camera Status */
	CAMERASTATUS_INTENSITY			= 0x004D1110	# R/O, mode,	"CAMERASTATUS INTENSITY"	*/
	CAMERASTATUS_INPUTTRIGGER		= 0x004D1120	# R/O, mode,	"CAMERASTATUS INPUT TRIGGER"*/
	CAMERASTATUS_CALIBRATION		= 0x004D1130	# R/O, mode,	"CAMERASTATUS CALIBRATION"	*/

	# Group: Back Focus Position */
	BACKFOCUSPOS_TARGET				= 0x00804010	# R/W, micro-meter,"BACK FOCUS POSITION TARGET"	*/
	BACKFOCUSPOS_CURRENT			= 0x00804020	# R/O, micro-meter,"BACK FOCUS POSITION CURRENT"	*/
	BACKFOCUSPOS_LOADFROMMEMORY		= 0x00804050	# R/W, long, "BACK FOCUS POSITION LOAD FROM MEMORY"*/
	BACKFOCUSPOS_STORETOMEMORY		= 0x00804060	# W/O, long, "BACK FOCUS POSITION STORE TO MEMORY"	*/

	# Group: SYSTEM */
	# system property */

	SYSTEM_ALIVE					= 0x00FF0010	# R/O, mode,	"SYSTEM ALIVE"			*/

	CONVERSIONFACTOR_COEFF			= 0x00FFE010	# R/O, double,	"CONVERSION FACTOR COEFF"	*/
	CONVERSIONFACTOR_OFFSET			= 0x00FFE020	# R/O, double,	"CONVERSION FACTOR OFFSET"	*/




# ==== declare structures for DCIMG-API functions ====

class DCAMAPI_INIT(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iDeviceCount", c_int32),
		("reserved", c_int32),
		("initoptionbytes", c_int32),
		("initoption", POINTER(c_int32)),
		("guid", c_void_p)
	]

	def __init__(self):
		self.size = sizeof(DCAMAPI_INIT)


class DCAMDEV_OPEN(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("index", c_int32),
		("hdcam", c_void_p)
	]

	def __init__(self):
		self.size = sizeof(DCAMDEV_OPEN)
		self.index = 0



class DCAM_TIMESTAMP(Structure):
	_pack_ = 8
	_fields_ = [
		("sec", c_uint32),
		("microsec", c_int32)
	]

	def __init__(self):
		self.sec = 0
		self.microsec = 0


class DCAMDEV_STRING(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iString", c_int32),
		("text", c_char_p),
		("textbytes", c_int32)
	]

	def __init__(self):
		self.size = sizeof(DCAMDEV_STRING)


class DCAMWAIT_OPEN(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("supportevent", c_int32),
		("hwait", c_void_p),
		("hdcam", c_void_p)
	]

	def __init__(self):
		self.size = sizeof(DCAMWAIT_OPEN)


class DCAMWAIT_START(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("eventhappened", c_int32),
		("eventmask", c_int32),
		("timeout", c_int32)
	]

	def __init__(self):
		self.size = sizeof(DCAMWAIT_START)

class DCAMCAP_TRANSFERINFO(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("nNewestFrameIndex", c_int32),
		("nFrameCount", c_int32)
	]

	def __init__(self):
		self.size = sizeof(DCAMCAP_TRANSFERINFO)

class DCAMBUF_FRAME(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32),
		("buf", c_void_p),
		("rowbytes", c_int32),
		("type", c_int32),			# DCIMG_PIXELTYPE
		("width", c_int32),
		("height", c_int32),
		("left", c_int32),
		("top", c_int32),
		("timestamp", DCAM_TIMESTAMP),
		("framestamp", c_int32),
		("camerastamp", c_int32)
	]

	def __init__(self):
		self.size = sizeof(DCAMBUF_FRAME)
		self.iKind = 0
		self.option = 0
		self.iFrame = 0
		self.buf = 0
		self.rowbytes = 0
		self.type = PIXELTYPE.MONO16
		self.width = 0
		self.height = 0
		self.left = 0
		self.top = 0

class DCAMREC_OPEN(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),#[in] size of this structure.
		("reserved", c_int32),#[in]
		("hrec", c_void_p),#HDCAMREC [out]
		("path", c_char_p),#[in]
		("ext", c_char_p),#[in]
		("maxframepersession", c_int32),#[in]
		("userdatasize", c_int32),#[in]
		("userdatasize_session", c_int32),#[in]
		("userdatasize_file", c_int32),#[in]
		("usertextsize", c_int32),#[in]
		("usertextsize_session", c_int32),#[in]
		("usertextsize_file", c_int32)#[in]
	]
	
	def __init__(self):
		self.size = sizeof(DCAMREC_OPEN)
		self.ext = "dcimg".encode('UTF-8')
		self.maxframepersession = 0
		self.userdatasize_file = 0
		self.usertextsize_file = 0
		self.userdatasize_session = 0
		self.usertextsize_session = 0
		self.userdatasize = 0
		self.usertextsize = 0


class DCAMREC_STATUS(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("currentsession_index", c_int32),
		("maxframecount_per_session", c_int32),
		("currentframe_index", c_int32),
		("missingframe_count", c_int32),
		("flags", c_int32),#DCAMREC_STATUSFLAG
		("totalframecount", c_int32),
		("reserved", c_int32)
	]

	def __init__(self):
		self.size = sizeof(DCAMREC_STATUS)

class CODEPAGE(IntEnum):
	SHIFT_JIS = 932    # Shift JIS
	UTF16_LE = 1200    # UTF-16 (Little Endian)
	UTF16_BE = 1201    # UTF-16 (Big Endian)
	UTF7 = 65000    # UTF-7 translation
	UTF8 = 65001    # UTF-8 translation
		
class DCAMPROP_ATTR(Structure):
	_pack_ = 8
	_fields_ = [
		("cbSize", c_int32),
		("iProp", c_int32),
		("option", c_int32),
		("iReserved1", c_int32),

		("attribute", c_int32),
		("iGroup", c_int32),
		("iUnit", c_int32),
		("attribute2", c_int32),

		("valuemin", c_double),
		("valuemax", c_double),
		("valuestep", c_double),
		("valuedefault", c_double),

		("nMaxChannel", c_int32),
		("iReserved3", c_int32),
		("nMaxView", c_int32),

		("iProp_NumberOfElement", c_int32),
		("iProp_ArrayBase", c_int32),
		("iPropStep_Element", c_int32)
	]

	def __init__(self):
		self.cbSize = sizeof(DCAMPROP_ATTR)

class DCAMPROP_VALUETEXT(Structure):
	_pack_ = 8
	_fields_ = [
		("cbSize", c_int32),
		("iProp", c_int32),
		("value", c_double),
		("text", c_char_p),
		("textbytes", c_int32)
	]
	def __init__(self):
		self.cbSize = sizeof(DCAMPROP_VALUETEXT)

class DCAMREC_OPEN(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("reserved", c_int32),
		("hrec", c_void_p),
		("path", c_char_p),
		("ext", c_char_p),
		("maxframepersession", c_int32),
		("userdatasize", c_int32),
		("userdatasize_session", c_int32),
		("userdatasize_file", c_int32),
		("usertextsize", c_int32),
		("usertextsize_session", c_int32),
		("usertextsize_file", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAMREC_OPEN)


class DCAM_METADATAHDR(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAM_METADATAHDR)

class DCAM_METADATABLOCKHDR(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32),
		("in_count", c_int32),
		("outcount", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAM_METADATABLOCKHDR)

class DCAM_USERDATATEXT(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32),
		("text", c_char_p),
		("text_len", c_int32),
		("codepage", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAM_USERDATATEXT)

class DCAM_USERDATABIN(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32),
		("bin", c_void_p),
		("bin_len", c_int32),
		("reserved", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAM_USERDATABIN)

class DCAM_TIMESTAMPBLOCK(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32),
		("in_count", c_int32),
		("outcount", c_int32),
		("timestamps", DCAM_TIMESTAMP),
		("timestampsize", c_int32),
		("timestampvaildsize", c_int32),
		("timestampkind", c_int32),
		("reserved", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAM_TIMESTAMPBLOCK)

class DCAM_FRAMESTAMPBLOCK(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32),
		("in_count", c_int32),
		("outcount", c_int32),
		("framestamps", c_int32),
		("reserved", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAM_FRAMESTAMPBLOCK)

class DCAM_METADATATEXTBLOCK(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32),
		("in_count", c_int32),
		("outcount", c_int32),
		("text", c_void_p),
		("textsizes", c_int32),
		("bytesperunit", c_int32),
		("reserved", c_int32),
		("textcodepage", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAM_METADATATEXTBLOCK)

class DCAM_METADATABINBLOCK(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("iKind", c_int32),
		("option", c_int32),
		("iFrame", c_int32),
		("in_count", c_int32),
		("outcount", c_int32),
		("bin", c_void_p),
		("binsizes", c_int32),
		("bytesperunit", c_int32),
		("reserved", c_int32),
	]
	def __init__(self):
		self.size = sizeof(DCAM_METADATABINBLOCK)

class DCAMREC_STATUS(Structure):
	_pack_ = 8
	_fields_ = [
		("size", c_int32),
		("currentsession_index", c_int32),
		("maxframecount_per_session", c_int32),
		("currentframe_index", c_int32),
		("missingframe_count", c_int32),
		("flags", c_int32),
		("totalframecount", c_int32),
		("reserved", c_int32)
	]
	def __init__(self):
		self.size = sizeof(DCAMREC_STATUS)


# ==== assign aliases ====

def init(initparam):
	return __dll.dcamapi_init(byref(initparam))

def uninit():
	return __dll.dcamapi_uninit()

def open(openparam):
	return __dll.dcamdev_open(byref(openparam))

def close(hdcam):
	return __dll.dcamdev_close(ctypes.c_void_p(hdcam))

def getcapability(hdcam, capparam):
	return __dll.dcamdev_getcapability(ctypes.c_void_p(hdcam), byref(capparam))

def getstring(hdcam, stringparam):
	return __dll.dcamdev_getstring(ctypes.c_void_p(hdcam), byref(stringparam))

def waitopen(waitopenparam):
	return __dll.dcamwait_open(byref(waitopenparam))

def waitclose(hwait):
	return __dll.dcamwait_close(ctypes.c_void_p(hwait))

def waitstart(hdcam, waitstartparam):
	return __dll.dcamwait_start(ctypes.c_void_p(hdcam), byref(waitstartparam))

def waitabort(hwait):
	return __dll.dcamwait_abort(ctypes.c_void_p(hwait))

def alloc(hdcam, frames):
	return __dll.dcambuf_alloc(ctypes.c_void_p(hdcam), frames)

def release(hdcam):
	return __dll.dcambuf_release(ctypes.c_void_p(hdcam))

def startcapture(hdcam, mode):
	return __dll.dcamcap_start(ctypes.c_void_p(hdcam), mode)

def stopcapture(hdcam):
	return __dll.dcamcap_stop(ctypes.c_void_p(hdcam))

def startrecorder(hdcam, hrec):
	return __dll.dcamcap_record(ctypes.c_void_p(hdcam), ctypes.c_void_p(hrec))

def gettransferinfo(hdcam, transferparam):
	return __dll.dcamcap_transferinfo(ctypes.c_void_p(hdcam), byref(transferparam))

def lockframe(hdcam, frame):
	return __dll.dcambuf_lockframe(ctypes.c_void_p(hdcam), byref(frame))

def getpropattr(hdcam, propattrparam):
	retval = __dll.dcamprop_getattr(ctypes.c_void_p(hdcam), byref(propattrparam))
	# return retval
	# does not return successful for some reason
	return DCERR.SUCCESS

def getpropvalue(hdcam, propid):
	cval = ctypes.c_double(0)
	retval = __dll.dcamprop_getvalue(ctypes.c_void_p(hdcam), propid, byref(cval))
	if retval != DCERR.SUCCESS:
		return None
	return cval.value

def setpropvalue(hdcam, propid, value):
	return __dll.dcamprop_setvalue(ctypes.c_void_p(hdcam), propid, ctypes.c_double(value))

def querypropvalue(hdcam, propid, value, option):
	cval = ctypes.c_double(value)
	retval = __dll.dcamprop_queryvalue(ctypes.c_void_p(hdcam), propid, byref(cval), option)
	if retval != DCERR.SUCCESS:
		return None
	return cval.value

def getnextpropid(hdcam, propid, option):
	func = ctypes.c_int32(propid)
	retval = __dll.dcamprop_getnextid(ctypes.c_void_p(hdcam), byref(func), option)
	if retval != DCERR.SUCCESS:
		return 0
	return int(func.value)

def getpropname(hdcam, propid, text, textbytes):
	retval = __dll.dcamprop_getname(ctypes.c_void_p(hdcam), propid, text, textbytes)
	if retval != DCERR.SUCCESS:
		return None
	return text.decode()

def getvaluetext(hdcam, valuetextparam):
	return __dll.dcamprop_getvaluetext(ctypes.c_void_p(hdcam), byref(valuetextparam))

def openrec(recopenparam):
	return __dll.dcamrec_openA(byref(recopenparam))

def closerec(hrec):
	return __dll.dcamrec_close(ctypes.c_void_p(hrec))

def lockframerec(hrec):
	return __dll.dcamrec_lockframe(ctypes.c_void_p(hrec))

def getrecorderstatus(hrec, recstatusparam):
	return __dll.dcamrec_status(ctypes.c_void_p(hrec), byref(recstatusparam))

